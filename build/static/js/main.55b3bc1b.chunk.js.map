{"version":3,"sources":["utils/api/index.js","deck/list.js","home/index.js","deck/study/study.js","Layout/NotFound.js","Layout/Header.js","deck/form.js","deck/edit.js","card/list.js","deck/view.js","card/form.js","card/edit.js","card/create.js","deck/create.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updateCard","updatedCard","append","DeckList","useState","decks","setDecks","loadDecks","listDecks","then","useEffect","list","map","className","length","description","to","onClick","window","confirm","Home","path","Study","setDeck","setCards","useParams","value","side","setSide","cardInd","setCardInd","history","useHistory","aria-label","aria-current","push","NotFound","Header","DeckForm","onSubmit","initialState","deck1","changeHandler","target","prevState","log","event","preventDefault","stopPropagation","htmlFor","type","required","placeholder","onChange","rows","DeckEdit","renderForm","goBack","updateDeck","CardList","onCardDelete","front","back","title","DeckView","loadDeck","confirmed","deleteCard","CardForm","setCard","CardEdit","readCard","CardCreate","createCard","savedCard","DeckCreate","createDeck","savedDeck","Layout","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55b3bc1b.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\n\nfunction DeckList() {\n  const [decks, setDecks] = useState([]);\n  \n  useEffect(loadDecks, []);\n\n  function deleteHandler(deckId) {\n    const confirmed = window.confirm(\"Do you really want to delete this?\");\n    if (confirmed) {\n        deleteDeck(deckId).then(loadDecks)\n    }\n  }\n  function loadDecks() {\n      listDecks().then(setDecks);\n  }\n\n  const list = decks.map((deck) => (\n    <li key={deck.id} className=\"border list-group-item list-group-item-action flex-column align-items-start\">\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h3 className=\"mb-1\">{deck.name}</h3>\n        <small>{deck.cards.length} cards</small>\n      </div>\n      <p className=\"mb-1\">{deck.description}</p>\n    \n      <div className=\"btn-group\">\n        <Link to={`decks/${deck.id}`} className=\"btn btn-secondary\"><span />View</Link>\n        <Link to={`decks/${deck.id}/study`} className=\"btn btn-primary\"><span />Study</Link>\n        <Link to=\"\" className=\"btn btn-danger float-right\" id={deck.id} onClick={() => deleteHandler(deck.id)}>\n          <span className=\"oi oi-trash\"/>\n        </Link>\n      </div>\n    </li>\n  ));\n\n  return (\n    <div>\n      <Link to=\"/decks/new\" className=\"btn btn-secondary\">\n        <span className=\"oi oi-plus\" /> Create Deck\n      </Link>\n      <ul className=\"list-group mt-2 deck-list\">{list}</ul>\n    </div>\n  );\n}\n\nexport default DeckList;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport DeckList from \"../deck/list\";\n\nfunction Home() {\n  return (\n    <div>\n    <div className=\"Home container\">\n      <Route path=\"/DeckList\">\n      <DeckList />\n      </Route>\n    </div>\n    </div>\n  );\n}\n\nexport default Home;","import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../../utils/api\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\n\nfunction Study() {\n  const [deck, setDeck] = useState([]);\n  const [cards, setCards] = useState([]);\n  const { deckId } = useParams();\n\n  useEffect(processDeck, [deckId]);\n\n  function processDeck() {\n    readDeck(deckId).then((value) => {\n      setDeck(value);\n      setCards(value[\"cards\"]);\n    });\n  }\n\n  const [side, setSide] = useState(\"front\");\n\n  const handleFlip = () => {\n    if (side === \"front\") {\n      setSide(\"back\");\n    } else {\n      setSide(\"front\");\n    }\n  };\n\n  const [cardInd, setCardInd] = useState(0);\n\n  const history = useHistory();\n\n  const handleNext = () => {\n    if (cardInd + 1 < deck[\"cards\"].length) {\n      setCardInd(cardInd + 1);\n      setSide(\"front\");\n    } else {\n      if (window.confirm(\"Reset cards?\\n\\nPress cancel to return home.\")) {\n        setCardInd(0);\n        setSide(\"front\");\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  if (cards.length > 2) {\n    return (\n      <div className=\"container\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <Link to=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </Link>\n            </li>\n            <li className=\"breadcrumb-item\" aria-current=\"page\">\n              {deck.name}\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Study\n            </li>\n          </ol>\n        </nav>\n        <div>\n          <h2>Study: {deck.name}</h2>\n        </div>\n        <div>\n          <div className=\"card-container\">\n            <div className=\"card-body border\">\n              <h4>\n                Card {cardInd + 1} of {cards.length}\n              </h4>\n              <p>{deck[\"cards\"][cardInd][side]}</p>\n              <button className=\"btn btn-secondary\" onClick={handleFlip}>\n                Flip\n              </button>\n              {side === \"back\" && (\n                <button className=\"btn btn-secondary\" onClick={handleNext}>\n                  Next\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <Link to=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              {deck.name}\n            </li>\n          </ol>\n        </nav>\n        <h2>Not enough cards.</h2>\n        <p>You need at least 3 cards to study.</p>\n        <Link to=\"/decks/:deckId/cards/new\" className=\"btn btn-primary\">\n          + Add Card\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Study;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n      <br />\n      <Link to='/'>Return Home</Link>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useState } from \"react\";\n\nfunction DeckForm({\n  onSubmit,\n  onCancel,\n  initialState = { name: \"\", description: \"\" },\n}) {\n  const [deck1, setDeck] = useState(initialState);\n\n  console.log(\"initialSTate:\", initialState);\n  console.log(\"this is a deck:\", deck1);\n\n  function changeHandler({ target: { name, value } }) {\n    setDeck((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n  // useEffect(() => {\n  //     if (JSON.stringify(initialState) !== JSON.stringify(deck)) {\n  //     setDeck(initialState)\n  //     }\n  // }, [initialState])\n\n  function submitHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onSubmit(deck1);\n  }\n\n  return (\n    <div>\n      <form onSubmit={submitHandler} className=\"deck-edit\">\n        <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              className=\"form-control\"\n              value={deck1 && deck1.name}\n              required={true}\n              placeholder=\"Deck Name\"\n              onChange={changeHandler}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              className=\"form-control\"\n              rows=\"4\"\n              required={true}\n              placeholder=\"Brief description of the deck\"\n              value={deck1 && deck1.description}\n              onChange={changeHandler}\n            />\n          </div>\n          <button\n            className=\"btn btn-secondary mr-2\"\n            type=\"button\"\n            onClick={onCancel}\n          >\n            Cancel\n          </button>\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Submit\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n}\n\nexport default DeckForm;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { readDeck, updateDeck } from \"../utils/api\";\nimport { useParams } from \"react-router-dom\";\n\nimport DeckForm from \"./form\";\n\nfunction DeckEdit() {\n  const [deck, setDeck] = useState({ name: \"\", description: \"\" });\n\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  console.log(\"deck in edit:\", deck);\n  useEffect(loadDeck, [deckId]);\n\n  function loadDeck() {\n    readDeck(deckId).then(setDeck);\n  }\n\n  function submitHandler(updatedDeck) {\n    updateDeck(updatedDeck).then(() => {\n      history.push(`/decks/${deckId}`);\n    });\n  }\n\n  function cancel() {\n    history.goBack();\n  }\n\n  // This is why I had the conditional render only once we have the deck id then load the form 🤦🏻‍♂️\n  const renderForm = deck.id ? (\n    <DeckForm onCancel={cancel} onSubmit={submitHandler} initialState={deck} />\n  ) : (\n    <p>Loading...</p>\n  );\n\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Deck\n          </li>\n        </ol>\n      </nav>\n      <h1>Edit Deck</h1>\n      {renderForm}\n    </div>\n  );\n}\n\nexport default DeckEdit;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction CardList({ deck, onCardDelete }) {\n  const { cards = [] } = deck;\n\n  const list = cards.map((card) => (\n    <li\n      key={card.id}\n      className=\"list-group-item list-group-item-action flex-column align-items-start\"\n    >\n      <div className=\"row\">\n        <div className=\"col-md-10\">\n          <div className=\"row\">\n            <div className=\"col\">{card.front}</div>\n            <div className=\"col\">{card.back}</div>\n          </div>\n        </div>\n        <div className=\"col text-right\">\n          <Link\n            to={`/decks/${deck.id}/cards/${card.id}/edit`}\n            className=\"btn btn-secondary mr-2\"\n            title=\"Edit Card\"\n          >\n            <span className=\"oi oi-pencil\" /> Edit\n          </Link>\n          <button className=\"btn btn-danger\" title=\"Delete Card\">\n            <span\n              className=\"oi oi-trash\"\n              onClick={() => onCardDelete(card.id)}\n            />\n          </button>\n        </div>\n      </div>\n    </li>\n  ));\n\n  return (\n    <div className=\"mt-4 card-list\">\n      <h3>Cards</h3>\n      <ul className=\"list-group\">{list}</ul>\n    </div>\n  );\n}\n\nexport default CardList;","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { deleteCard, deleteDeck, readDeck } from \"../utils/api\";\nimport CardList from \"../card/list\";\n\nfunction DeckView() {\n  const history = useHistory();\n  const { deckId } = useParams();\n  const [deck, setDeck] = useState({ cards: [] });\n\n  useEffect(loadDeck, [deckId]);\n\n  function loadDeck() {\n    readDeck(deckId).then(setDeck);\n  }\n\n  function handleDelete() {\n    const confirmed = window.confirm(\n      \"Do you really want to delete this?\\n\\nYou will not be able to recover it.\"\n    );\n    if (confirmed) {\n      deleteDeck(deck.id).then(() => history.push(\"/decks\"));\n    }\n  }\n\n  function deleteCardHandler(cardId) {\n    const confirmed = window.confirm(\n      \"Do you really want to delete this?\\n\\nYou will not be able to recover it..\"\n    );\n    if (confirmed) {\n      console.log(\"deleteCardHandler\", confirmed, cardId);\n      deleteCard(cardId).then(loadDeck);\n    }\n  }\n\n  return (\n    <main className=\"container deck-view\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            {deck.name}\n          </li>\n        </ol>\n      </nav>\n      <div className=\"media mb-2\">\n        <div className=\"media-body\">\n          <h5 className=\"mt-0\">{deck.name}</h5>\n          {deck.description}\n        </div>\n      </div>\n      <Link\n        to={`/decks/${deck.id}/edit`}\n        className=\"btn btn-secondary mr-2\"\n        title=\"Edit deck\"\n      >\n        <span className=\"oi oi-pencil\" /> Edit\n      </Link>\n      <Link\n        to={`/decks/${deck.id}/study`}\n        className=\"btn btn-primary mr-2\"\n        title=\"Study deck\"\n      >\n        <span className=\"oi oi-book\" /> Study\n      </Link>\n      <Link\n        to={`/decks/${deck.id}/cards/new`}\n        className=\"btn btn-primary\"\n        title=\"Add Card\"\n      >\n        <span className=\"oi oi-plus\" /> Add Card\n      </Link>\n      <button className=\"btn btn-danger float-right\" title=\"Delete deck\">\n        <span className=\"oi oi-trash\" onClick={handleDelete} />\n      </button>\n      <CardList deck={deck} onCardDelete={deleteCardHandler} />\n    </main>\n  );\n}\nexport default DeckView;","import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\";\n\nfunction CardForm({ onSubmit, initialState = { front: \"\", back: \"\" } }) {\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  const [card, setCard] = useState(initialState);\n  const [deck, setDeck] = useState({ name: \"\", description: \"\" });\n\n  function changeHandler({ target: { name, value } }) {\n    setCard((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n  useEffect(loadDeck, [deckId]);\n\n  function loadDeck() {\n    readDeck(deckId).then(setDeck);\n  }\n\n  function submitHandler(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    onSubmit(card);\n  }\n\n  function cancel() {\n    history.goBack();\n  }\n\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\">{deck.name}</li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Add Card\n          </li>\n        </ol>\n      </nav>\n      <h2>{deck.name}: Add Card</h2>\n      <form onSubmit={submitHandler} className=\"deck-edit\">\n        <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Front</label>\n            <textarea\n              type=\"text\"\n              id=\"name\"\n              name=\"front\"\n              className=\"form-control\"\n              rows=\"2\"\n              required={true}\n              value={card.front}\n              placeholder=\"Front of card\"\n              onChange={changeHandler}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Back</label>\n            <textarea\n              id=\"description\"\n              name=\"back\"\n              className=\"form-control\"\n              rows=\"2\"\n              required={true}\n              placeholder=\"Back of card\"\n              value={card.back}\n              onChange={changeHandler}\n            />\n          </div>\n          <button\n            className=\"btn btn-secondary mr-2\"\n            type=\"button\"\n            onClick={cancel}\n          >\n            Cancel\n          </button>\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Save\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n}\n\nexport default CardForm;","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { readCard, updateCard } from \"../utils/api\";\nimport { useParams } from \"react-router-dom\";\n\nimport CardForm from \"./form\";\n\nfunction CardEdit() {\n  const history = useHistory();\n\n  const { deckId, cardId } = useParams();\n  const [card, setCard] = useState();\n\n  useEffect(loadCard, [cardId]);\n\n  function loadCard() {\n    readCard(cardId).then(setCard);\n  }\n\n  async function submitHandler(card) {\n    await updateCard(card).then(() => {\n      history.push(`/decks/${deckId}`);\n    });\n  }\n\n  const renderForm = card ? (\n    <CardForm onSubmit={submitHandler} initialState={card} />\n  ) : (\n    <p>Loading...</p>\n  );\n\n  return (\n    <div>\n      <h2>Edit Card</h2>\n      {renderForm}\n    </div>\n  );\n}\n\nexport default CardEdit;","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { createCard } from \"../utils/api\";\nimport { useParams } from \"react-router-dom\";\n\nimport CardForm from \"./form\";\n\nfunction CardCreate() {\n\n    const history = useHistory();\n\n    const { deckId } = useParams();\n\n    function submitHandler(card) {\n        console.log(\"card:\", card)\n        createCard(deckId, card).then((savedCard) => {\n            \n            history.push(`/decks/${deckId}`)\n        }\n            \n        )\n    }\n\n    function cancel() {\n        history.goBack();\n    }\n\n    return (\n        <div>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\">\n                        <Link to=\"/\">\n                            <span className=\"oi oi-home\" /> Home\n                        </Link>\n                    </li>\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                        Create Deck\n                    </li>\n                </ol>\n            </nav>\n            <h1>Create Card</h1>\n            <CardForm onCancel={cancel} onSubmit={submitHandler} />\n        </div>\n    )\n}\n\nexport default CardCreate;","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { createDeck } from \"../utils/api\";\nimport DeckForm from \"./form\";\n\nfunction DeckCreate() {\n  const history = useHistory();\n  function submitHandler(deck) {\n    createDeck(deck).then((savedDeck) =>\n      history.push(`/decks/${savedDeck.id}`)\n    );\n  }\n\n  function cancel() {\n    history.goBack();\n  }\n  return (\n  \n      <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Create Deck\n          </li>\n        </ol>\n      </nav>\n      <h1>Create Deck</h1>\n      <DeckForm onCancel={cancel} onSubmit={submitHandler} />\n      </div>\n   \n  );\n}\nexport default DeckCreate;\n","import React from \"react\";\nimport { Switch, Redirect, Route } from \"react-router-dom\";\n\nimport Home from \"../home\";\nimport Study from \"../deck/study/study\";\nimport NotFound from \"./NotFound\";\nimport Header from \"./Header\";\nimport DeckEdit from \"../deck/edit\";\nimport DeckView from \"../deck/view\";\nimport CardEdit from \"../card/edit\";\nimport CardCreate from \"../card/create\";\nimport DeckCreate from \"../deck/create\";\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route path=\"/decks/new\">\n            <DeckCreate />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <DeckEdit />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <CardCreate />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <CardEdit />\n          </Route>\n          <Route exact path=\"/decks/:deckId\">\n            <DeckView />\n          </Route>\n          <Route exact path=\"/decks\">\n            <Redirect to=\"/\" />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}